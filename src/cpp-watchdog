#!/usr/bin/env python3

'''
@author: Polyakov Daniil
@mail: arjentix@gmail.com
@github: Arjentix
@date: 30.07.20
'''

from pausing_observer import PausingObserver
from event_handler import EventHandler
from window import Window

import sys
import time 
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler 
import getopt

params = {}
window = Window()
stop = False

def parse_args(argv):
    params['build_command'] = 'cmake --build build --config Debug --target all -- -j 10'
    params['test_bin'] = './build/test/test'
    params['ignore'] = '\\./build/*'
    params['files'] = ['.']

    optlist, args = getopt.getopt(argv, 'b:t:i:', ['build-command=', 'test-bin=', 'ignore='])
    for opt, arg in optlist:
        if opt in ('-b', '--build-command'):
            params['build_command'] = arg
        elif opt in ('-t', '--test-bin'):
            params['test_bin'] = arg
        elif opt in ('-i', '--ignore'):
            params['ignore'] = arg

    if len(args) != 0:
        params['files'] = args

def init_hotkeys(window, handler):
    # Registration of 3 types of Enter key
    window.add_key_handler(window.KEY_ENTER, handler.on_any_event)
    window.add_key_handler(10, handler.on_any_event)
    window.add_key_handler(13, handler.on_any_event)

    window.add_key_handler(ord('q'), quit_program)

    window.add_key_description('Enter', "rerun build & tests")   
    window.add_key_description('q', "quit")   

def quit_program():
    global window, stop
    window.stop()
    stop = True

def main():
    global window, stop, params
    parse_args(sys.argv[1:])
    observer = PausingObserver()
    handler = EventHandler(observer, window, params)

    init_hotkeys(window, handler)

    # Initial run
    handler.on_any_event(None)

    for file in params['files']:
        observer.schedule(handler, file, recursive=True)
    observer.start()

    try:
        while not stop:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    observer.stop()
    observer.join()

if __name__ == "__main__":
    main()
     